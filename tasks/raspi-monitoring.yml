---
- name: Gather package facts.
  ansible.builtin.package_facts:
    manager: auto
  when: ansible_facts.userspace_bits == '32'

- name: Upgrade libseccomp2 to latest version (32-bit Debian).
  ansible.builtin.import_tasks: tasks/debian-libseccomp-update.yml
  when:
    - ansible_facts.os_family == "Debian"
    - ansible_facts.userspace_bits == '32'
    - ansible_facts.packages['libseccomp2'][0]['version'] is version('2.4.4', '<')

- name: Synchronize raspi-monitoring directory.
  ansible.posix.synchronize:
    src: monitoring
    dest: "{{ config_dir }}/"
    delete: false
    recursive: true
    perms: false
  become: false

- name: Ensure raspi-monitoring directory is not a Git repository.
  ansible.builtin.file:
    path: "{{ config_dir }}/monitoring/.git/"
    state: absent
  become: false

- name: Copy templated raspi-monitoring files into place.
  ansible.builtin.template:
    src: templates/{{ item.src }}
    dest: "{{ config_dir }}/monitoring/{{ item.dest }}"
    mode: 0644
  loop:
    - src: grafana-config.monitoring.j2
      dest: grafana/config.monitoring
    - src: prometheus.yml.j2
      dest: prometheus/prometheus.yml
    - src: prometheus-pinghosts.yaml.j2
      dest: prometheus/pinghosts.yaml
    - src: prometheus-exporters-docker-compose.yaml.j2
      dest: docker-compose.yml
  notify: Restart raspi-monitoring
  become: false

- name: Copy OpenVPN monitoring dashboard config to Grafana.
  ansible.builtin.copy:
    src: templates/openvpn_exporter.json.j2
    dest: "{{ config_dir }}/monitoring/grafana/provisioning/dashboards/openvpn.json"
    mode: '0644'
  become: false
  notify: Restart raspi-monitoring
  when: openvpn_monitoring_enable

- name: Copy PiKVM monitoring dashboard config to Grafana.
  ansible.builtin.template:
    src: templates/pikvm.json.j2
    dest: "{{ config_dir }}/monitoring/grafana/provisioning/dashboards/pikvm.json"
    mode: 0644
  become: false
  notify: Restart raspi-monitoring
  when: pikvm_monitoring_enable

- name: Add cgroup_enable=cpuset to /boot/cmdline.txt
  become: true
  vars:
    content: "cgroup_enable=cpuset"
    file_path: "/boot/cmdline.txt"
  shell: |
    if [ ! -s {{ file_path }} ]; then
      echo "{{ content }}" >> {{ file_path }}
      echo "The file was empty. Added the line"
    elif ! grep -q -m 1 -E 'cgroup_enable=cpuset' {{ file_path }}; then
      sed -i "1s/$/ {{ content }}/" {{ file_path }}
      echo "The line has been added"
    else
      echo "The line is already present"
    fi

- name: Add cgroup_enable=memory to /boot/cmdline.txt
  become: true
  vars:
    content: "cgroup_enable=memory"
    file_path: "/boot/cmdline.txt"
  shell: |
    if [ ! -s {{ file_path }} ]; then
      echo "{{ content }}" >> {{ file_path }}
      echo "The file was empty. Added the line"
    elif ! grep -q -m 1 -E 'cgroup_enable=memory' {{ file_path }}; then
      sed -i "1s/$/ {{ content }}/" {{ file_path }}
      echo "The line has been added"
    else
      echo "The line is already present"
    fi

- name: Ensure raspi-monitoring environment is running.
  community.docker.docker_compose:
    project_src: "{{ config_dir }}/monitoring/"
    build: false
  become: false